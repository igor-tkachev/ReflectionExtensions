//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by ValueTuple.tt template for.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
#if NET20 || NET30 || NET35 || NET40 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NETSTANDARD1_0 || NETSTANDARD1_1 || NETSTANDARD1_2 || NETSTANDARD1_3 || NETSTANDARD1_4 || NETSTANDARD1_5 || NETSTANDARD1_6 || NETCOREAPP1_0 || NETCOREAPP1_1

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace System
{
	/// <summary>
	/// Represents a 1-tuple, or singleton, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1> : IEquatable<ValueTuple<T1>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`1" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		public ValueTuple(T1 item1)
		{
			Item1 = item1;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`1" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;

		int System.ITupleInternal.Size => 1;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`1" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1> other)
		{
			return _comparer1.Equals(Item1, other.Item1);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1> v)) return false;
			return comparer.Equals(Item1, v.Item1);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return comparer.GetHashCode(Item1);
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1>'", "other");
		}

		public int CompareTo(ValueTuple<T1> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`1" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return _comparer1.GetHashCode(Item1);
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 2-tuple, or pair, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2> : IEquatable<ValueTuple<T1,T2>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`2" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		public ValueTuple(T1 item1,T2 item2)
		{
			Item1 = item1;
			Item2 = item2;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`2" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`2" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;

		int System.ITupleInternal.Size => 2;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`2" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`2" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 3-tuple, or triple, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	/// <typeparam name="T3">The type of the tuple's third component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2,T3> : IEquatable<ValueTuple<T1,T2,T3>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2,T3>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`3" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		/// <param name="item3">The value of the tuple's third component.</param>
		public ValueTuple(T1 item1,T2 item2,T3 item3)
		{
			Item1 = item1;
			Item2 = item2;
			Item3 = item3;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`3" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`3" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`3" /> instance's third component.
		/// </summary>
		public readonly T3 Item3;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;
		static readonly EqualityComparer<T3> _comparer3 = EqualityComparer<T3>.Default;

		int System.ITupleInternal.Size => 3;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`3" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2,T3> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2,T3> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2) && _comparer3.Equals(Item3, other.Item3);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2,T3> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2) && comparer.Equals(Item3, v.Item3);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2,T3> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;
			num = comparer.Compare(Item3, v.Item3); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2),
				comparer.GetHashCode(Item3));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2,T3> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2,T3> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;
			num = Comparer<T3>.Default.Compare(Item3, other.Item3); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`3" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2),
				_comparer3.GetHashCode(Item3));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2) + ", " +
				((object)Item3);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 4-tuple, or quadruple, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	/// <typeparam name="T3">The type of the tuple's third component.</typeparam>
	/// <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2,T3,T4> : IEquatable<ValueTuple<T1,T2,T3,T4>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2,T3,T4>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`4" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		/// <param name="item3">The value of the tuple's third component.</param>
		/// <param name="item4">The value of the tuple's fourth component.</param>
		public ValueTuple(T1 item1,T2 item2,T3 item3,T4 item4)
		{
			Item1 = item1;
			Item2 = item2;
			Item3 = item3;
			Item4 = item4;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`4" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`4" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`4" /> instance's third component.
		/// </summary>
		public readonly T3 Item3;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`4" /> instance's fourth component.
		/// </summary>
		public readonly T4 Item4;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;
		static readonly EqualityComparer<T3> _comparer3 = EqualityComparer<T3>.Default;
		static readonly EqualityComparer<T4> _comparer4 = EqualityComparer<T4>.Default;

		int System.ITupleInternal.Size => 4;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`4" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2,T3,T4> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2,T3,T4> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2) && _comparer3.Equals(Item3, other.Item3) && _comparer4.Equals(Item4, other.Item4);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2,T3,T4> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2) && comparer.Equals(Item3, v.Item3) && comparer.Equals(Item4, v.Item4);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2,T3,T4> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;
			num = comparer.Compare(Item3, v.Item3); if (num != 0) return num;
			num = comparer.Compare(Item4, v.Item4); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2),
				comparer.GetHashCode(Item3),
				comparer.GetHashCode(Item4));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2,T3,T4> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2,T3,T4> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;
			num = Comparer<T3>.Default.Compare(Item3, other.Item3); if (num != 0) return num;
			num = Comparer<T4>.Default.Compare(Item4, other.Item4); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`4" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2),
				_comparer3.GetHashCode(Item3),
				_comparer4.GetHashCode(Item4));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2) + ", " +
				((object)Item3) + ", " +
				((object)Item4);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 5-tuple, or quintuple, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	/// <typeparam name="T3">The type of the tuple's third component.</typeparam>
	/// <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
	/// <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2,T3,T4,T5> : IEquatable<ValueTuple<T1,T2,T3,T4,T5>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2,T3,T4,T5>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`5" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		/// <param name="item3">The value of the tuple's third component.</param>
		/// <param name="item4">The value of the tuple's fourth component.</param>
		/// <param name="item5">The value of the tuple's fifth component.</param>
		public ValueTuple(T1 item1,T2 item2,T3 item3,T4 item4,T5 item5)
		{
			Item1 = item1;
			Item2 = item2;
			Item3 = item3;
			Item4 = item4;
			Item5 = item5;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`5" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`5" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`5" /> instance's third component.
		/// </summary>
		public readonly T3 Item3;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`5" /> instance's fourth component.
		/// </summary>
		public readonly T4 Item4;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`5" /> instance's fifth component.
		/// </summary>
		public readonly T5 Item5;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;
		static readonly EqualityComparer<T3> _comparer3 = EqualityComparer<T3>.Default;
		static readonly EqualityComparer<T4> _comparer4 = EqualityComparer<T4>.Default;
		static readonly EqualityComparer<T5> _comparer5 = EqualityComparer<T5>.Default;

		int System.ITupleInternal.Size => 5;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`5" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2,T3,T4,T5> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2,T3,T4,T5> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2) && _comparer3.Equals(Item3, other.Item3) && _comparer4.Equals(Item4, other.Item4) && _comparer5.Equals(Item5, other.Item5);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2,T3,T4,T5> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2) && comparer.Equals(Item3, v.Item3) && comparer.Equals(Item4, v.Item4) && comparer.Equals(Item5, v.Item5);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2,T3,T4,T5> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;
			num = comparer.Compare(Item3, v.Item3); if (num != 0) return num;
			num = comparer.Compare(Item4, v.Item4); if (num != 0) return num;
			num = comparer.Compare(Item5, v.Item5); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2),
				comparer.GetHashCode(Item3),
				comparer.GetHashCode(Item4),
				comparer.GetHashCode(Item5));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2,T3,T4,T5> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2,T3,T4,T5> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;
			num = Comparer<T3>.Default.Compare(Item3, other.Item3); if (num != 0) return num;
			num = Comparer<T4>.Default.Compare(Item4, other.Item4); if (num != 0) return num;
			num = Comparer<T5>.Default.Compare(Item5, other.Item5); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`5" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2),
				_comparer3.GetHashCode(Item3),
				_comparer4.GetHashCode(Item4),
				_comparer5.GetHashCode(Item5));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2) + ", " +
				((object)Item3) + ", " +
				((object)Item4) + ", " +
				((object)Item5);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 6-tuple, or sixtuple, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	/// <typeparam name="T3">The type of the tuple's third component.</typeparam>
	/// <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
	/// <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
	/// <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2,T3,T4,T5,T6> : IEquatable<ValueTuple<T1,T2,T3,T4,T5,T6>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2,T3,T4,T5,T6>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`6" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		/// <param name="item3">The value of the tuple's third component.</param>
		/// <param name="item4">The value of the tuple's fourth component.</param>
		/// <param name="item5">The value of the tuple's fifth component.</param>
		/// <param name="item6">The value of the tuple's sixth component.</param>
		public ValueTuple(T1 item1,T2 item2,T3 item3,T4 item4,T5 item5,T6 item6)
		{
			Item1 = item1;
			Item2 = item2;
			Item3 = item3;
			Item4 = item4;
			Item5 = item5;
			Item6 = item6;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's third component.
		/// </summary>
		public readonly T3 Item3;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's fourth component.
		/// </summary>
		public readonly T4 Item4;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's fifth component.
		/// </summary>
		public readonly T5 Item5;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`6" /> instance's sixth component.
		/// </summary>
		public readonly T6 Item6;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;
		static readonly EqualityComparer<T3> _comparer3 = EqualityComparer<T3>.Default;
		static readonly EqualityComparer<T4> _comparer4 = EqualityComparer<T4>.Default;
		static readonly EqualityComparer<T5> _comparer5 = EqualityComparer<T5>.Default;
		static readonly EqualityComparer<T6> _comparer6 = EqualityComparer<T6>.Default;

		int System.ITupleInternal.Size => 6;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`6" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2,T3,T4,T5,T6> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2,T3,T4,T5,T6> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2) && _comparer3.Equals(Item3, other.Item3) && _comparer4.Equals(Item4, other.Item4) && _comparer5.Equals(Item5, other.Item5) && _comparer6.Equals(Item6, other.Item6);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2,T3,T4,T5,T6> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2) && comparer.Equals(Item3, v.Item3) && comparer.Equals(Item4, v.Item4) && comparer.Equals(Item5, v.Item5) && comparer.Equals(Item6, v.Item6);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2,T3,T4,T5,T6> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5,T6>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;
			num = comparer.Compare(Item3, v.Item3); if (num != 0) return num;
			num = comparer.Compare(Item4, v.Item4); if (num != 0) return num;
			num = comparer.Compare(Item5, v.Item5); if (num != 0) return num;
			num = comparer.Compare(Item6, v.Item6); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2),
				comparer.GetHashCode(Item3),
				comparer.GetHashCode(Item4),
				comparer.GetHashCode(Item5),
				comparer.GetHashCode(Item6));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2,T3,T4,T5,T6> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5,T6>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2,T3,T4,T5,T6> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;
			num = Comparer<T3>.Default.Compare(Item3, other.Item3); if (num != 0) return num;
			num = Comparer<T4>.Default.Compare(Item4, other.Item4); if (num != 0) return num;
			num = Comparer<T5>.Default.Compare(Item5, other.Item5); if (num != 0) return num;
			num = Comparer<T6>.Default.Compare(Item6, other.Item6); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`6" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2),
				_comparer3.GetHashCode(Item3),
				_comparer4.GetHashCode(Item4),
				_comparer5.GetHashCode(Item5),
				_comparer6.GetHashCode(Item6));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2) + ", " +
				((object)Item3) + ", " +
				((object)Item4) + ", " +
				((object)Item5) + ", " +
				((object)Item6);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}

	/// <summary>
	/// Represents a 7-tuple, or sentuple, as a value type.
	/// </summary>
	/// <typeparam name="T1">The type of the tuple's first component.</typeparam>
	/// <typeparam name="T2">The type of the tuple's second component.</typeparam>
	/// <typeparam name="T3">The type of the tuple's third component.</typeparam>
	/// <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
	/// <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
	/// <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
	/// <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
	[StructLayout(LayoutKind.Auto)]
	internal readonly partial struct ValueTuple<T1,T2,T3,T4,T5,T6,T7> : IEquatable<ValueTuple<T1,T2,T3,T4,T5,T6,T7>>,
#if !NET20 && !NET30 && !NET35
		IStructuralEquatable, IStructuralComparable,
#endif
		IComparable, IComparable<ValueTuple<T1,T2,T3,T4,T5,T6,T7>>, ITupleInternal
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="T:System.ValueTuple`7" /> value type.
		/// </summary>
		/// <param name="item1">The value of the tuple's first component.</param>
		/// <param name="item2">The value of the tuple's second component.</param>
		/// <param name="item3">The value of the tuple's third component.</param>
		/// <param name="item4">The value of the tuple's fourth component.</param>
		/// <param name="item5">The value of the tuple's fifth component.</param>
		/// <param name="item6">The value of the tuple's sixth component.</param>
		/// <param name="item7">The value of the tuple's seventh component.</param>
		public ValueTuple(T1 item1,T2 item2,T3 item3,T4 item4,T5 item5,T6 item6,T7 item7)
		{
			Item1 = item1;
			Item2 = item2;
			Item3 = item3;
			Item4 = item4;
			Item5 = item5;
			Item6 = item6;
			Item7 = item7;
		}

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's first component.
		/// </summary>
		public readonly T1 Item1;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's second component.
		/// </summary>
		public readonly T2 Item2;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's third component.
		/// </summary>
		public readonly T3 Item3;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's fourth component.
		/// </summary>
		public readonly T4 Item4;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's fifth component.
		/// </summary>
		public readonly T5 Item5;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's sixth component.
		/// </summary>
		public readonly T6 Item6;

		/// <summary>
		/// The current <see cref="T:System.ValueTuple`7" /> instance's seventh component.
		/// </summary>
		public readonly T7 Item7;

		static readonly EqualityComparer<T1> _comparer1 = EqualityComparer<T1>.Default;
		static readonly EqualityComparer<T2> _comparer2 = EqualityComparer<T2>.Default;
		static readonly EqualityComparer<T3> _comparer3 = EqualityComparer<T3>.Default;
		static readonly EqualityComparer<T4> _comparer4 = EqualityComparer<T4>.Default;
		static readonly EqualityComparer<T5> _comparer5 = EqualityComparer<T5>.Default;
		static readonly EqualityComparer<T6> _comparer6 = EqualityComparer<T6>.Default;
		static readonly EqualityComparer<T7> _comparer7 = EqualityComparer<T7>.Default;

		int System.ITupleInternal.Size => 7;

		/// <summary>
		/// Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7" /> instance is equal to a specified object.
		/// </summary>
		/// <param name="obj">The object to compare with this instance.</param>
		/// <returns><see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
		/// <remarks>
		/// The <paramref name="obj" /> parameter is considered to be equal to the current instance under the following conditions:
		/// <list type="bullet">
		///     <item><description>It is a <see cref="T:System.ValueTuple`7" /> value type.</description></item>
		///     <item><description>Its components are of the same types as those of the current instance.</description></item>
		///     <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
		/// </list>
		/// </remarks>
		public override bool Equals(object obj)
		{
			return obj is ValueTuple<T1,T2,T3,T4,T5,T6,T7> v && Equals(v);
		}

		public bool Equals(ValueTuple<T1,T2,T3,T4,T5,T6,T7> other)
		{
			return _comparer1.Equals(Item1, other.Item1) && _comparer2.Equals(Item2, other.Item2) && _comparer3.Equals(Item3, other.Item3) && _comparer4.Equals(Item4, other.Item4) && _comparer5.Equals(Item5, other.Item5) && _comparer6.Equals(Item6, other.Item6) && _comparer7.Equals(Item7, other.Item7);
		}

#if !NET20 && !NET30 && !NET35

		bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
		{
			if (other == null || !(other is ValueTuple<T1,T2,T3,T4,T5,T6,T7> v)) return false;
			return comparer.Equals(Item1, v.Item1) && comparer.Equals(Item2, v.Item2) && comparer.Equals(Item3, v.Item3) && comparer.Equals(Item4, v.Item4) && comparer.Equals(Item5, v.Item5) && comparer.Equals(Item6, v.Item6) && comparer.Equals(Item7, v.Item7);
		}

		int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
		{
			return ((ITupleInternal)this).GetHashCode(comparer);
		}

		int IStructuralComparable.CompareTo(object other, IComparer comparer)
		{
			if (other == null) return 1;

			if (!(other is ValueTuple<T1,T2,T3,T4,T5,T6,T7> v))
				throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5,T6,T7>'", "other");

			int num;

			num = comparer.Compare(Item1, v.Item1); if (num != 0) return num;
			num = comparer.Compare(Item2, v.Item2); if (num != 0) return num;
			num = comparer.Compare(Item3, v.Item3); if (num != 0) return num;
			num = comparer.Compare(Item4, v.Item4); if (num != 0) return num;
			num = comparer.Compare(Item5, v.Item5); if (num != 0) return num;
			num = comparer.Compare(Item6, v.Item6); if (num != 0) return num;
			num = comparer.Compare(Item7, v.Item7); if (num != 0) return num;

			return num;
		}

#endif

		int ITupleInternal.GetHashCode(IEqualityComparer comparer)
		{
			return ValueTuple.CombineHashCodes(
				comparer.GetHashCode(Item1),
				comparer.GetHashCode(Item2),
				comparer.GetHashCode(Item3),
				comparer.GetHashCode(Item4),
				comparer.GetHashCode(Item5),
				comparer.GetHashCode(Item6),
				comparer.GetHashCode(Item7));
		}

		int IComparable.CompareTo(object other)
		{
			if (other == null) return 1;
			if (other is ValueTuple<T1,T2,T3,T4,T5,T6,T7> v) return CompareTo(v);

			throw new ArgumentException("Incorrect type of 'ValueTuple<T1,T2,T3,T4,T5,T6,T7>'", "other");
		}

		public int CompareTo(ValueTuple<T1,T2,T3,T4,T5,T6,T7> other)
		{
			int num;

			num = Comparer<T1>.Default.Compare(Item1, other.Item1); if (num != 0) return num;
			num = Comparer<T2>.Default.Compare(Item2, other.Item2); if (num != 0) return num;
			num = Comparer<T3>.Default.Compare(Item3, other.Item3); if (num != 0) return num;
			num = Comparer<T4>.Default.Compare(Item4, other.Item4); if (num != 0) return num;
			num = Comparer<T5>.Default.Compare(Item5, other.Item5); if (num != 0) return num;
			num = Comparer<T6>.Default.Compare(Item6, other.Item6); if (num != 0) return num;
			num = Comparer<T7>.Default.Compare(Item7, other.Item7); if (num != 0) return num;

			return num;
		}

		/// <summary>
		/// Returns the hash code for the current <see cref="T:System.ValueTuple`7" /> instance.
		/// </summary>
		/// <returns>A 32-bit signed integer hash code.</returns>
		public override int GetHashCode()
		{
			return ValueTuple.CombineHashCodes(
				_comparer1.GetHashCode(Item1),
				_comparer2.GetHashCode(Item2),
				_comparer3.GetHashCode(Item3),
				_comparer4.GetHashCode(Item4),
				_comparer5.GetHashCode(Item5),
				_comparer6.GetHashCode(Item6),
				_comparer7.GetHashCode(Item7));
		}

		string ITupleInternal.ToStringEnd()
		{
			return "" +
				((object)Item1) + ", " +
				((object)Item2) + ", " +
				((object)Item3) + ", " +
				((object)Item4) + ", " +
				((object)Item5) + ", " +
				((object)Item6) + ", " +
				((object)Item7);
		}

		public override string ToString()
		{
			return "(" + ((ITupleInternal)this).ToStringEnd() + ")";
		}
	}
}

#endif
